// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketMonster.Infrastructure.Data;

#nullable disable

namespace TicketMonster.Infrastructure.Migrations
{
    [DbContext(typeof(TicketMonsterContext))]
    partial class TicketMonsterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TicketMonster.ApplicationCore.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasComment("1");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Sports");

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("LastEditBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("TicketMonster.ApplicationCore.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("ModifyTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("TicketMonster.ApplicationCore.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasComment("1");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID")
                        .HasComment("1");

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime")
                        .HasComment("2023/12/07");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("BlackPink");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("true");

                    b.Property<string>("LastEditBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("datetime");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("SubCategoryID")
                        .HasComment("1");

                    b.Property<decimal>("TotalTime")
                        .HasColumnType("decimal(10, 2)")
                        .HasComment("12(hours)");

                    b.Property<int>("VenueId")
                        .HasColumnType("int")
                        .HasColumnName("VenueID")
                        .HasComment("1");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("VenueId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("TicketMonster.ApplicationCore.Entities.EventPerform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasComment("1");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("EventID")
                        .HasComment("1 同個活動多個演出者");

                    b.Property<int>("IsPrimary")
                        .HasColumnType("int")
                        .HasComment("判斷主客隊");

                    b.Property<string>("LastEditBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("datetime");

                    b.Property<int>("PerfomerId")
                        .HasColumnType("int")
                        .HasColumnName("PerfomerID")
                        .HasComment("3");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("PerfomerId");

                    b.ToTable("EventPerform", (string)null);
                });

            modelBuilder.Entity("TicketMonster.ApplicationCore.Entities.EventSeat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasComment("1");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("EventID")
                        .HasComment("2");

                    b.Property<string>("LastEditBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("datetime");

                    b.Property<string>("SeatArea")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("區塊名稱");

                    b.Property<decimal>("SeatPrice")
                        .HasColumnType("money")
                        .HasComment("78.54");

                    b.Property<string>("SeatRowBegin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("001");

                    b.Property<string>("SeatRowEnd")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("100");

                    b.HasKey("Id")
                        .HasName("PK_EventSeat_1");

                    b.HasIndex("EventId");

                    b.ToTable("EventSeat", (string)null);
                });

            modelBuilder.Entity("TicketMonster.ApplicationCore.Entities.EventsPic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasComment("1");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("EventID")
                        .HasComment("1");

                    b.Property<string>("LastEditBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Pic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("svg || url");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("照片順序");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventsPic", (string)null);
                });

            modelBuilder.Entity("TicketMonster.ApplicationCore.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventPic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(10, 7)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(10, 7)");

                    b.Property<string>("VenueLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VenueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TicketMonster.ApplicationCore.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventSeat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<DateTime?>("ScannedTime")
                        .HasColumnType("datetime")
                        .HasComment("QRcode掃描時間");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("TicketMonster.ApplicationCore.Entities.Performer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasComment("1");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Kpop");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID")
                        .HasComment("1");

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("LastEditBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("BlackPink");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("SubCategoryID")
                        .HasComment("2");

                    b.HasKey("Id");

                    b.ToTable("Performers");
                });

            modelBuilder.Entity("TicketMonster.ApplicationCore.Entities.PerformerPic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("LastEditBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("datetime");

                    b.Property<int>("PerfomerId")
                        .HasColumnType("int")
                        .HasColumnName("PerfomerID");

                    b.Property<string>("Pic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PerfomerId");

                    b.ToTable("PerformerPic", (string)null);
                });

            modelBuilder.Entity("TicketMonster.ApplicationCore.Entities.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasComment("1");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CatagoryId")
                        .HasColumnType("int")
                        .HasColumnName("CatagoryID")
                        .HasComment("1");

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("LastEditBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("datetime");

                    b.Property<string>("SubCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Basketball");

                    b.HasKey("Id");

                    b.HasIndex("CatagoryId");

                    b.ToTable("SubCategory", (string)null);
                });

            modelBuilder.Entity("TicketMonster.ApplicationCore.Entities.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasComment("1");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Capacity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("2000");

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("LastEditBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(10, 7)")
                        .HasComment("113.2456754");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("台北市");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(10, 7)")
                        .HasComment("48.123468");

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("datetime");

                    b.Property<string>("VenueName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("台北小巨蛋");

                    b.HasKey("Id");

                    b.ToTable("Venues");

                    b.HasData(
                        new
                        {
                            Id = 9,
                            Capacity = "2000人",
                            Latitude = 51m,
                            Location = "台北市",
                            Longitude = 12m,
                            VenueName = "台北小巨蛋"
                        });
                });

            modelBuilder.Entity("TicketMonster.ApplicationCore.Entities.VenueArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasComment("1");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("LastEditBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("datetime");

                    b.Property<string>("SeatArea")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("A");

                    b.Property<string>("SeatsCount")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("001");

                    b.Property<int>("VenuesId")
                        .HasColumnType("int")
                        .HasColumnName("VenuesID")
                        .HasComment("1");

                    b.HasKey("Id")
                        .HasName("PK_VenueSeat");

                    b.HasIndex("VenuesId");

                    b.ToTable("VenueAreas");
                });

            modelBuilder.Entity("TicketMonster.ApplicationCore.Entities.Event", b =>
                {
                    b.HasOne("TicketMonster.ApplicationCore.Entities.SubCategory", "SubCategory")
                        .WithMany("Events")
                        .HasForeignKey("SubCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Events_SubCategory");

                    b.HasOne("TicketMonster.ApplicationCore.Entities.Venue", "Venue")
                        .WithMany("Events")
                        .HasForeignKey("VenueId")
                        .IsRequired()
                        .HasConstraintName("FK_Events_Venues1");

                    b.Navigation("SubCategory");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("TicketMonster.ApplicationCore.Entities.EventPerform", b =>
                {
                    b.HasOne("TicketMonster.ApplicationCore.Entities.Event", "Event")
                        .WithMany("EventPerforms")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_EventPerform_Events");

                    b.HasOne("TicketMonster.ApplicationCore.Entities.Performer", "Perfomer")
                        .WithMany("EventPerforms")
                        .HasForeignKey("PerfomerId")
                        .IsRequired()
                        .HasConstraintName("FK_EventPerform_Performers");

                    b.Navigation("Event");

                    b.Navigation("Perfomer");
                });

            modelBuilder.Entity("TicketMonster.ApplicationCore.Entities.EventSeat", b =>
                {
                    b.HasOne("TicketMonster.ApplicationCore.Entities.Event", "Event")
                        .WithMany("EventSeats")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_EventSeat_Events1");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("TicketMonster.ApplicationCore.Entities.EventsPic", b =>
                {
                    b.HasOne("TicketMonster.ApplicationCore.Entities.Event", "Event")
                        .WithMany("EventsPics")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_EventsPic_Events");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("TicketMonster.ApplicationCore.Entities.Order", b =>
                {
                    b.HasOne("TicketMonster.ApplicationCore.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Customers");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("TicketMonster.ApplicationCore.Entities.OrderDetail", b =>
                {
                    b.HasOne("TicketMonster.ApplicationCore.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetails_Orders");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TicketMonster.ApplicationCore.Entities.PerformerPic", b =>
                {
                    b.HasOne("TicketMonster.ApplicationCore.Entities.Performer", "Perfomer")
                        .WithMany("PerformerPics")
                        .HasForeignKey("PerfomerId")
                        .IsRequired()
                        .HasConstraintName("FK_PerformerPic_Performers");

                    b.Navigation("Perfomer");
                });

            modelBuilder.Entity("TicketMonster.ApplicationCore.Entities.SubCategory", b =>
                {
                    b.HasOne("TicketMonster.ApplicationCore.Entities.Category", "Catagory")
                        .WithMany("SubCategories")
                        .HasForeignKey("CatagoryId")
                        .IsRequired()
                        .HasConstraintName("FK_SubCategory_Category");

                    b.Navigation("Catagory");
                });

            modelBuilder.Entity("TicketMonster.ApplicationCore.Entities.VenueArea", b =>
                {
                    b.HasOne("TicketMonster.ApplicationCore.Entities.Venue", "Venues")
                        .WithMany("VenueAreas")
                        .HasForeignKey("VenuesId")
                        .IsRequired()
                        .HasConstraintName("FK_VenueAreas_Venues1");

                    b.Navigation("Venues");
                });

            modelBuilder.Entity("TicketMonster.ApplicationCore.Entities.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("TicketMonster.ApplicationCore.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TicketMonster.ApplicationCore.Entities.Event", b =>
                {
                    b.Navigation("EventPerforms");

                    b.Navigation("EventSeats");

                    b.Navigation("EventsPics");
                });

            modelBuilder.Entity("TicketMonster.ApplicationCore.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("TicketMonster.ApplicationCore.Entities.Performer", b =>
                {
                    b.Navigation("EventPerforms");

                    b.Navigation("PerformerPics");
                });

            modelBuilder.Entity("TicketMonster.ApplicationCore.Entities.SubCategory", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("TicketMonster.ApplicationCore.Entities.Venue", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("VenueAreas");
                });
#pragma warning restore 612, 618
        }
    }
}
